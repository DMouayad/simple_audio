// This file initializes the dynamic library and connects it with the stub
// generated by flutter_rust_bridge_codegen.

import 'dart:ffi';
import 'dart:io';

import 'package:ffi/ffi.dart';

import 'bridge_generated.dart';
import 'bridge_definitions.dart';
export 'bridge_definitions.dart';

// Re-export the bridge so it is only necessary to import this file.
export 'bridge_generated.dart';
import 'dart:io' as io;

const _base = 'simple_audio';

// On MacOS, the dynamic library is not bundled with the binary,
// but rather directly **linked** against the binary.
final _dylib = io.Platform.isWindows ? '$_base.dll' : 'lib$_base.so';

final SimpleAudio api = SimpleAudioImpl(io.Platform.isIOS || io.Platform.isMacOS
    ? DynamicLibrary.executable()
    : DynamicLibrary.open(_dylib));

int getHWND()
{
    if(!Platform.isWindows) { throw "This can only be used on Windows."; }

    final user32 = DynamicLibrary.open('user32.dll');

    final findWindowA = user32.lookupFunction<
        Int32 Function(Pointer<Utf8> lpClassName, Pointer<Utf8> lpWindowName),
        int Function(Pointer<Utf8> lpClassName,
            Pointer<Utf8> lpWindowName)>('FindWindowA');

    return findWindowA('FLUTTER_RUNNER_WIN32_WINDOW'.toNativeUtf8(), nullptr);
}